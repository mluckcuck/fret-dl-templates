[
    {
        "reqid": "HCResiliance2",
        "parent_reqid": "",
        "project": "[DL] Water Distribution System",
        "rationale": "whenever (c S ≥ t S ) RLAgent shall immediately\nsatisfy (h ≤ h min + δ suff => sup rl = sup dgr )",
        "comments": "",
        "fulltext": "whenever ( cs  >=  ts ) RLAgent shall immediately satisfy (! h > hmin  +  deltaSuff ) =>  supRL  =  supDGR ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "cs",
                "ts",
                "h",
                "hmin",
                "deltaSuff",
                "supRL",
                "supDGR"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( cs >= ts ))",
            "regular_condition": "(( cs >= ts ))",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "RLAgent",
            "componentTextRange": [
                24,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( ! h > hmin + deltaSuff ) => supRL = supDGR)",
            "responseTextRange": [
                50,
                105
            ],
            "diagramVariables": "CC = <b><i>(( cs >= ts ))</i></b>, Response = <b><i>(( ! h > hmin + deltaSuff ) => supRL = supDGR)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(( cs >= ts ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(cs >= ts)",
            "regular_condition_unexp_ft": "(cs >= ts)",
            "regular_condition_SMV_pt": "(cs >= ts)",
            "regular_condition_SMV_ft": "(cs >= ts)",
            "post_condition_unexp_pt": "((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))",
            "post_condition_unexp_ft": "((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))",
            "post_condition_SMV_pt": "((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))",
            "post_condition_SMV_ft": "((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "CoCoSpecCode": "H(((cs >= ts) => (not ((h > (hmin + deltaSuff))) => (supRL = supDGR))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "ftExpanded": "(LAST V ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((cs >= ts) -> ((! (h > (hmin + deltaSuff))) -> (supRL = supDGR))))",
            "component": "RLAgent"
        },
        "_id": "2ebb3890-a679-11ef-8874-cde1a02b03fb"
    },
    {
        "reqid": "RLNoChange",
        "parent_reqid": "",
        "project": "[DL] Water Distribution System",
        "rationale": "whenever (c S < t S ) RLAgent shall immediately satisfy \nsup rl := sup rlold ; i rl := i rlold\n\n",
        "comments": "Maintain Action again, needs to have the variable name.",
        "fulltext": "whenever ( cs  <  ts ) RLAgent shall immediately satisfy maintain( suprl, irl )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "cs",
                "ts",
                "maintain",
                "suprl",
                "irl"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( cs < ts ))",
            "regular_condition": "(( cs < ts ))",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "RLAgent",
            "componentTextRange": [
                23,
                29
            ],
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(maintain ( suprl , irl ))",
            "responseTextRange": [
                49,
                78
            ],
            "diagramVariables": "CC = <b><i>(( cs < ts ))</i></b>, Response = <b><i>(maintain ( suprl , irl ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(( cs < ts ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(cs < ts)",
            "regular_condition_unexp_ft": "(cs < ts)",
            "regular_condition_SMV_pt": "(cs < ts)",
            "regular_condition_SMV_ft": "(cs < ts)",
            "post_condition_unexp_pt": "maintain(suprl,irl)",
            "post_condition_unexp_ft": "maintain(suprl,irl)",
            "post_condition_SMV_pt": "maintain(suprl,irl)",
            "post_condition_SMV_ft": "maintain(suprl,irl)",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((cs < ts) -> maintain(suprl,irl)))",
            "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((cs < ts) -> maintain(suprl,irl)))",
            "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((cs < ts) -> maintain(suprl,irl)))",
            "CoCoSpecCode": "H(((cs < ts) => maintain(suprl,irl)))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((cs < ts) -> maintain(suprl,irl)))",
            "ftExpanded": "(LAST V ((cs < ts) -> maintain(suprl,irl)))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((cs < ts) -> maintain(suprl,irl)))",
            "component": "RLAgent"
        },
        "_id": "2ebb3891-a679-11ef-8874-cde1a02b03fb"
    },
    {
        "reqid": "RLChooseAction",
        "parent_reqid": "",
        "project": "[DL] Water Distribution System",
        "rationale": "whenever (c S ≥ t S ) RLAgent shall immediately satisfy sup rl :=\n∗; i rl := ∗;",
        "comments": "",
        "fulltext": "whenever ( cs  >=  ts ) RLAgent shall immediately satisfy choose( suprl, irl )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "cs",
                "ts",
                "choose",
                "suprl",
                "irl"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( cs >= ts ))",
            "regular_condition": "(( cs >= ts ))",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "RLAgent",
            "componentTextRange": [
                24,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(choose ( suprl , irl ))",
            "responseTextRange": [
                50,
                77
            ],
            "diagramVariables": "CC = <b><i>(( cs >= ts ))</i></b>, Response = <b><i>(choose ( suprl , irl ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(( cs >= ts ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(cs >= ts)",
            "regular_condition_unexp_ft": "(cs >= ts)",
            "regular_condition_SMV_pt": "(cs >= ts)",
            "regular_condition_SMV_ft": "(cs >= ts)",
            "post_condition_unexp_pt": "choose(suprl,irl)",
            "post_condition_unexp_ft": "choose(suprl,irl)",
            "post_condition_SMV_pt": "choose(suprl,irl)",
            "post_condition_SMV_ft": "choose(suprl,irl)",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((cs >= ts) -> choose(suprl,irl)))",
            "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((cs >= ts) -> choose(suprl,irl)))",
            "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((cs >= ts) -> choose(suprl,irl)))",
            "CoCoSpecCode": "H(((cs >= ts) => choose(suprl,irl)))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((cs >= ts) -> choose(suprl,irl)))",
            "ftExpanded": "(LAST V ((cs >= ts) -> choose(suprl,irl)))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((cs >= ts) -> choose(suprl,irl)))",
            "component": "RLAgent"
        },
        "_id": "2ebb3892-a679-11ef-8874-cde1a02b03fb"
    },
    {
        "reqid": "SystemResilience",
        "parent_reqid": "",
        "project": "[DL] Water Distribution System",
        "rationale": "if h > h min ∧ sup rl ≥ sup dgr System shall always satisfy h >\nh min ∧ sup rl ≥ sup dgr",
        "comments": "",
        "fulltext": "if  h > hmin & supRL >= supDGR System shall always satisfy  h > hmin  &  supRL  >=  supDGR ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "h",
                "hmin",
                "supRL",
                "supDGR"
            ],
            "qualifier_word": "if",
            "pre_condition": "(h > hmin & supRL >= supDGR)",
            "regular_condition": "(h > hmin & supRL >= supDGR)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(h > hmin & supRL >= supDGR)",
            "responseTextRange": [
                51,
                89
            ],
            "diagramVariables": "TC = <b><i>(h > hmin & supRL >= supDGR)</i></b>, Response = <b><i>(h > hmin & supRL >= supDGR)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(h > hmin & supRL >= supDGR)</i></b> is true and any point in the interval where <b><i>(h > hmin & supRL >= supDGR)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((h > hmin) & (supRL >= supDGR))",
            "regular_condition_unexp_ft": "((h > hmin) & (supRL >= supDGR))",
            "regular_condition_SMV_pt": "((h > hmin) & (supRL >= supDGR))",
            "regular_condition_SMV_ft": "((h > hmin) & (supRL >= supDGR))",
            "post_condition_unexp_pt": "((h > hmin) & (supRL >= supDGR))",
            "post_condition_unexp_ft": "((h > hmin) & (supRL >= supDGR))",
            "post_condition_SMV_pt": "((h > hmin) & (supRL >= supDGR))",
            "post_condition_SMV_ft": "((h > hmin) & (supRL >= supDGR))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST V $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> (LAST V $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ((h > hmin) & (supRL >= supDGR))) & ((! LAST) & (X ((h > hmin) & (supRL >= supDGR))))) -> (X (LAST V ((h > hmin) & (supRL >= supDGR)))))) & (((h > hmin) & (supRL >= supDGR)) -> (LAST V ((h > hmin) & (supRL >= supDGR)))))",
            "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | $post_condition_unexp_pt$))",
            "pt": "(H ((H (! ((h > hmin) & (supRL >= supDGR)))) | ((h > hmin) & (supRL >= supDGR))))",
            "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((H (! ((h > hmin) & (supRL >= supDGR)))) | ((h > hmin) & (supRL >= supDGR))))",
            "CoCoSpecCode": "H((H(not (((h > hmin) and (supRL >= supDGR)))) or ((h > hmin) and (supRL >= supDGR))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST V $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (LAST V $post_condition_SMV_ft$)))",
            "ftExpandedUnoptimized": "((LAST V (((! ((h > hmin) & (supRL >= supDGR))) & ((! LAST) & (X ((h > hmin) & (supRL >= supDGR))))) -> (X (LAST V ((h > hmin) & (supRL >= supDGR)))))) & (((h > hmin) & (supRL >= supDGR)) -> (LAST V ((h > hmin) & (supRL >= supDGR)))))",
            "ftExpanded": "((LAST V (((! ((h > hmin) & (supRL >= supDGR))) & ((! LAST) & (X ((h > hmin) & (supRL >= supDGR))))) -> (X (LAST V ((h > hmin) & (supRL >= supDGR)))))) & (((h > hmin) & (supRL >= supDGR)) -> (LAST V ((h > hmin) & (supRL >= supDGR)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (G $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (G $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ((h > hmin) & (supRL >= supDGR))) & (X ((h > hmin) & (supRL >= supDGR)))) -> (X (G ((h > hmin) & (supRL >= supDGR)))))) & (((h > hmin) & (supRL >= supDGR)) -> (G ((h > hmin) & (supRL >= supDGR)))))",
            "component": "System"
        },
        "_id": "2ebb3893-a679-11ef-8874-cde1a02b03fb"
    },
    {
        "reqid": "HCResiliance1",
        "parent_reqid": "",
        "project": "[DL] Water Distribution System",
        "rationale": "whenever (c S ≥ t S ) RLAgent shall immediately\nsatisfy (h > h min + δ suff => sup rl ≥ sup dgr ∧ h − sup rl · t S >\nh min )",
        "comments": "Seems that var + is not needed anymore.",
        "fulltext": "whenever ( cs  >=  ts ) RLAgent shall immediately \tsatisfy ( h > hmin  +  deltaSuff ) =>  supRL  >=  supDGR  & ( h  +  (h - supRL) *ts   > hmin )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "noTrigger",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "cs",
                "ts",
                "h",
                "hmin",
                "deltaSuff",
                "supRL",
                "supDGR"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( cs >= ts ))",
            "regular_condition": "(( cs >= ts ))",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "RLAgent",
            "componentTextRange": [
                24,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( h > hmin + deltaSuff ) => supRL >= supDGR & ( h + ( h - supRL ) * ts > hmin ))",
            "responseTextRange": [
                51,
                144
            ],
            "diagramVariables": "CC = <b><i>(( cs >= ts ))</i></b>, Response = <b><i>(( h > hmin + deltaSuff ) => supRL >= supDGR & ( h + ( h - supRL ) * ts > hmin ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(( cs >= ts ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(cs >= ts)",
            "regular_condition_unexp_ft": "(cs >= ts)",
            "regular_condition_SMV_pt": "(cs >= ts)",
            "regular_condition_SMV_ft": "(cs >= ts)",
            "post_condition_unexp_pt": "((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))",
            "post_condition_unexp_ft": "((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))",
            "post_condition_SMV_pt": "((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))",
            "post_condition_SMV_ft": "((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))",
            "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "CoCoSpecCode": "H(((cs >= ts) => ((h > (hmin + deltaSuff)) => ((supRL >= supDGR) and ((h + ((h - supRL) * ts)) > hmin)))))",
            "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpandedUnoptimized": "(LAST V ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "ftExpanded": "(LAST V ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G ((cs >= ts) -> ((h > (hmin + deltaSuff)) -> ((supRL >= supDGR) & ((h + ((h - supRL) * ts)) > hmin)))))",
            "component": "RLAgent"
        },
        "_id": "2ebb3894-a679-11ef-8874-cde1a02b03fb"
    }
]